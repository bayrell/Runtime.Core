/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Core;

use Runtime.rs;
use Runtime.rtl;
use Runtime.lib;
use Runtime.BusResult;
use Runtime.Collection;
use Runtime.CoreDriver;
use Runtime.CoreObject;
use Runtime.CoreStruct;
use Runtime.CoreProvider;
use Runtime.Dict;
use Runtime.Map;
use Runtime.Vector;
use Runtime.RuntimeUtils;
use Runtime.Annotations.IntrospectionClass;
use Runtime.Annotations.IntrospectionInfo;
use Runtime.Exceptions.RuntimeException;
use Runtime.Interfaces.ContextInterface;
use Runtime.Core.Driver;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Core.Message;
use Runtime.Core.MessageRPC;
use Runtime.Core.Provider;


struct Context extends CoreStruct implements ContextInterface
{
	/* Struct data */
	string base_path = null;
	Dict<string> enviroments = null;
	Dict<var> settings = null;
	Collection<string> modules = null;
	Collection<CoreStruct> entities = null;
	Collection<string> cli_args = null;
	Dict<CoreDriver> drivers = null;
	Dict<CoreStruct> providers = null;
	
	/* Variable data */
	bool initialized = false;
	bool started = false;
	int start_time = 0;
	
	/* Private data */
	private Vector logs = new Vector();
	
	/* Entrypoint and main class */
	string entry_point = "";
	string main_module = "";
	string main_class = "";
	
	
	
	/**
	 * Returns app name
	 * @return string
	 */
	pure string appName() => "";
	
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> getSettings(Dict env) => null;
	
	
	
	/**
	 * Extends entities
	 */
	pure Collection<CoreStruct> getEntities(Collection<CoreStruct> entities) => null;
	
	
	
	/**
	 * Returns enviroment by eky
	 */
	fn env(string key, var def_value = "") =>
		this
		|> attr "enviroments"
		|> lib::get(key, def_value)
	;
	
	
	
	/**
	 * Returns settings
	 * @return Dict<string>
	 */
	fn config(Collection items, primitive d = null) =>
		this
		|> attr "settings"
		|> lib::get("config", null)
		|> lib::attr(items, d)
	;
	
	
	
	/**
	 * Returns docker secret key
	 */
	fn secret(string key) =>
		this
		|> attr "settings"
		|> lib::get(key, "")
	;
	
	
	
	/**
	 * Create context
	 *
	 * @params Dict env
	 * @params Collection<string> modules
	 * @params Dict settings
	 * @return Context
	 */
	pure Context create(Dict env = null)
	{
		Dict settings = {};
		
		/* Context data */
		Dict obj = {
			"enviroments": env,
			"settings": settings,
			"modules": [],
		};
		
		/* Create context */
		Context ctx = static::newInstance(obj);
		
		return ctx;
	}
	
	
	
	/**
	 * Set main module
	 */
	pure Context setMainModule(Context c, string main_module)
	{
		Dict settings = {};
		string main_module_class_name = "";
		
		/* Get settings */
		if (main_module)
		{
			main_module_class_name = main_module ~ ".ModuleDescription";
			fn f = rtl::method(main_module_class_name, "appSettings");
			settings = f(c.enviroments);
		}
		
		/* Add main module */
		if (main_module)
		{
			c <= modules <= c.modules.pushIm(main_module);
		}
		
		/* Set main module */
		c <= main_module <= main_module;
		c <= main_class <= main_module_class_name;
		
		/* Set new settings */
		c <= settings <= settings;
		
		return c;
	}
	
	
	
	/**
	 * Set entry point
	 */
	pure Context setEntryPoint(Context c, string entry_point) =>
		c.copy{ "entry_point": entry_point }
	;
	
	
	
	/**
	 * Prepare to run
	 */
	static async Context prepare(Context c)
	{
		string main_class = c.main_class;
		
		/* Init app */
		if (main_class != "")
		{
			fn appInit = rtl::method(main_class, "appInit");
			c = appInit(c);
		}
		else
		{
			c = c::init(c);
		}
		
		
		/* Start app */
		if (main_class != "")
		{
			fn appStart = rtl::method(main_class, "appStart");
			c = await appStart(c);
		}
		else
		{
			c = await c::start(c);
		}
		
		return c;
	}
	
	
	
	/**
	 * Run entry point
	 */
	static async Context run(Context c)
	{
		string entry_point = c.entry_point;
		
		/* Run entrypoint */
		if (entry_point != "")
		{
			fn run = rtl::method(entry_point, "run");
			await @run(c);
		}
		
		return c;
	}
	
	
	
	/**
	 * Init context
	 */
	static Context init(Context c)
	{
		if (c.initialized) return c;
		
		/* Extends modules */
		Collection<string> modules = static::getRequiredModules(c.modules);
		
		/* Get modules entities */
		Collection<CoreStruct> entities = static::getEntitiesFromModules(modules);
		entities = entities.prependCollectionIm( static::getEntities(c.env) );
		
		/* Base path */
		string base_path = (c.base_path != "") ? c.base_path : rtl::attr(c.env, ["BASE_PATH"], "", "string");
		
		/* Add entities */
		if (c.entities != null) entities = entities.appendCollectionIm(c.entities);
		c <= entities <= entities;
		
		/* Extend entities */
		entities = c.chain("Runtime.Entities", [c, entities]);
		entities = static::extendEntities(c, entities);
		entities = static::getRequiredEntities(entities);
		
		/* Get providers */
		Dict<CoreStruct> providers = static::getProvidersFromEntities(c, entities);
		
		/* Register drivers */
		Dict<CoreDriver> drivers = static::getDriversFromEntities(c, entities);
		
		return c.copy
		{
			"modules": modules,
			"entities": entities,
			"providers": providers,
			"drivers": drivers,
			"base_path": base_path,
			"initialized": true,
		};
	}
	
	
	
	/**
	 * Start context
	 */
	static async Context start(Context c)
	{
		if (c.started) return c;
		Collection<string> drivers = c.drivers.keys();
		for (int i=0; i<drivers.count(); i++)
		{
			string driver_name = drivers.item(i);
			CoreDriver driver = c.drivers.item(driver_name);
			await driver.startDriver();
		}
		
		return c.copy{"started": true};
	}
	
	
	
	/* ---------------- Driver & Provider --------------- */
	
	/**
	 * Get driver
	 *
	 * @params string driver_name
	 * @return Runtime.anager
	 */
	fn getDriver(string driver_name) => this.drivers.get(driver_name, null);
	
	
	
	/**
	 * Create provider
	 *
	 * @params string provider_name
	 * @return CoreProvider
	 */
	fn createProvider(string provider_name, Dict params = null, string settings_name = "default")
	{
		CoreProvider provider = null;
		if (this.providers.has(provider_name))
		{
			Provider info = this.providers.item(provider_name);
			if (info.kind == Provider::KIND_INTERFACE)
			{
				throw new RuntimeException("Provider " ~ provider_name ~ " does not declared");
			}
			string class_name = info.className();
			
			/* Set default params */
			if (params == null)
			{
				params = rtl::attr(this.settings, ["providers", class_name, settings_name]);
			}
			if (params == null) params = {};
			
			provider = rtl::newInstance(class_name, [params]);
			provider = this.chain(class_name, [provider]);
			if (provider_name != class_name)
			{
				provider = this.chain(provider_name, [provider]);
			}
		}
		else
		{
			throw new RuntimeException("Provider " ~ provider_name ~ " not found");
		}
		return provider;
	}
	
	
	
	/**
	 * Returns provider
	 *
	 * @params string provider_name
	 * @return CoreProvider
	 */
	fn getProvider(string provider_name, string settings_name = "default") =>
		this.createProvider(provider_name, null, settings_name)
	;
	
	
	
	/* ---------------------- Chain --------------------- */
	
	/**
	 * Apply Lambda Chain
	 */
	fn chain(string chain_name, Dict args)
	{
		Collection<CoreStruct> entities = this.entities.filter
		(
			bool (CoreStruct item) use (chain_name) =>
				item instanceof LambdaChain and
				item.name == chain_name and
				item.is_async == false
		);
		entities = entities.sortIm
		(
			int (LambdaChain a, LambdaChain b) => a.pos > b.pos
		);
		
		for (int i=0; i<entities.count(); i++)
		{
			LambdaChain item = entities.item(i);
			string item_chain_name = item.chain;
			if (item_chain_name != "")
			{
				var res = this.chain(item_chain_name, args);
				args = args.setIm(args.count() - 1, res);
			}
			else
			{
				Collection arr = rs::split("::", item.value);
				string class_name = arr.get(0, "");
				string method_name = arr.get(1, "");
				fn f = rtl::method(class_name, method_name);
				var res = rtl::apply(f, args);
				args = args.setIm(args.count() - 1, res);
			}
		}
		var res = args.last();
		return res;
	}
	
	
	
	/**
	 * Apply Lambda Chain Await
	 */
	async fn chainAwait(string chain_name, Dict args)
	{
		Collection<CoreStruct> entities = this.entities.filter
		(
			bool (CoreStruct item) use (chain_name) =>
				item instanceof LambdaChain and
				item.name == chain_name
		);
		entities = entities.sortIm
		(
			int (LambdaChain a, LambdaChain b) => a.pos > b.pos
		);
		
		for (int i=0; i<entities.count(); i++)
		{
			LambdaChain item = entities.item(i);
			string item_chain_name = item.chain;
			if (item_chain_name != "")
			{
				var res = await this.chainAwait(item_chain_name, args);
				args = args.setIm(args.count() - 1, res);
			}
			else
			{
				Collection arr = rs::split("::", item.value);
				string class_name = arr.get(0, "");
				string method_name = arr.get(1, "");
				fn f = rtl::method(class_name, method_name);
				
				if (item.is_async)
				{
					var res = await rtl::apply(f, args);
					args = args.setIm(args.count() - 1, res);
				}
				else
				{
					var res = rtl::apply(f, args);
					args = args.setIm(args.count() - 1, res);
				}
			}
		}
		var res = args.last();
		return res;
	}
	
	
	
	/**
	 * Translate message
	 * @params string space - message space
	 * @params string message - message need to be translated
	 * @params Map params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	fn translate(string space, string message, Map params = null, string locale = "")
	{
		message = (params == null) ? message :
			params.reduce
			(
				string (string message, string value, string key) =>
					rs::replace("%" ~ key ~ "%", value, message)
				,
				message
			)
		;
		return message;
	}
	
	
	
	/* ----------------------- Bus ---------------------- */
	
	
	/**
	 * Send message
	 * @param Message msg
	 * @return Message
	 */ 
	fn send(MessageRPC msg) =>
		this.getProvider(rtl::BUS_INTERFACE, "default")
		|> await method sendMessage( msg )
		|> monad MessageRPC::end
	;
	
	
	
	/**
	 * Send rpc message
	 * @param Dict items
	 * @return Message
	 */ 
	fn sendMessage(Dict items) =>
		this.getProvider(rtl::BUS_INTERFACE, "default")
		|> await method sendMessage( MessageRPC::create(items) )
		|> monad MessageRPC::end
	;
	
	
	
	/* ---------------------- Logs ---------------------- */
	
	/**
	 * Log message
	 * @param string message
	 * @param int loglevel
	 */
	fn debug(string message, int loglevel = 0)
	{
		this.logs.push(message ~ "\n");
	}
	
	
	
	/**
	 * Timer message
	 * @param string message
	 * @param int loglevel
	 */
	fn log_timer(string message, int loglevel = 0)
	{
		int time = this.utime;
		time = time - this.start_time;
		string s = "[" ~ rtl::round(time * 1000) ~ "]ms " ~ message ~ "\n";
		this.logs.push(s);
		#switch
		#case ifcode PHP then
		/*if (isset($_GET['aaa']) && $_GET['aaa'] == 'bbb') var_dump($s);*/
		#endswitch
	}
	
	
	
	/**
	 * Dump var to log
	 * @param var v
	 * @param int loglevel
	 */
	fn dump(var v, int loglevel = 0)
	{
		#switch
		#case ifcode PHP then
		ob_start();
		var_dump($v);
		$content = ob_get_contents();
		ob_end_clean();
		$this->logs->push($content);
		#endswitch
	}
	
	
	
	/**
	 * Append logs message
	 * @param Collection<string> logs
	 */
	fn logAppend(Collection<string> logs)
	{
		/*this.logs.appendVector(logs);*/
	}
	
	
	
	/**
	 * Return logs
	 */
	fn getLogs()
	{
		/*return this.logs.toCollection();*/
		return [];
	}
	
	
	
	/* ---------------------- Other --------------------- */
	
	/**
	 * Returns unix timestamp
	 */
	int time()
	{
		#switch
		#case ifcode PHP then
		return time();
		#endswitch
	}
	
	
	
	/**
	 * Returns unix timestamp
	 */
	int utime()
	{
		#switch
		#case ifcode PHP then
		return microtime(true);
		#endswitch
	}
	
	
	/* -------------------- Functions ------------------- */
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	pure void _getRequiredModules
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> modules,
		fn filter = null
	)
	{
		if (modules == null) return;
		if (filter) modules = modules.filter(filter);
		for (int i=0; i<modules.count(); i++)
		{
			string module_name = modules.item(i);
			if (cache.get(module_name, false) == false)
			{
				cache.set(module_name, true);
				fn f = rtl::method(module_name ~ ".ModuleDescription", "requiredModules");
				Dict<string> sub_modules = f();
				if (sub_modules != null)
				{
					Collection<string> sub_modules = sub_modules.keys();
					static::_getRequiredModules(res, cache, sub_modules);
				}
				res.push(module_name);
			}
		}
	}
	
	
	
	/**
	 * Returns all modules
	 * @param Collection<string> modules
	 * @return Collection<string>
	 */
	pure Collection<string> getRequiredModules(Collection<string> modules)
	{
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		static::_getRequiredModules(res, cache, modules);
		res = res.removeDublicatesIm();
		return res.toCollection();
	}
	
	
	
	/**
	 * Returns modules entities
	 */
	pure Collection<CoreStruct> getEntitiesFromModules(Collection<string> modules)
	{
		Vector<CoreStruct> entities = new Vector();
		for (int i=0; i<modules.count(); i++)
		{
			string module_class_name = modules.item(i) ~ ".ModuleDescription";
			fn f = rtl::method(module_class_name, "entities");
			Collection<CoreStruct> arr = f();
			entities.appendVector(arr);
		}
		return entities.toCollection();
	}
	
	
	
	/**
	 * Extend entities
	 */
	pure Collection<CoreStruct> getRequiredEntities(Collection<CoreStruct> entities)
	{
		Vector<CoreStruct> e = entities.toVector();
		for (int i=0; i<entities.count(); i++)
		{
			CoreStruct item1 = entities.item(i);
			string item1_class_name = item1.getClassName();
			if (item1_class_name == "Runtime.Core.Entity")
			{
				string class_name = (item1.value != "") ? item1.value : item1.name;
				IntrospectionClass info = RuntimeUtils::getClassIntrospection(class_name);
				if (info != null and info.class_info)
				{
					for (int j=0; j<info.class_info.count(); j++)
					{
						CoreStruct item2 = info.class_info.item(j);
						string item2_class_name = item2.getClassName();
						if (item2 instanceof Entity and item2_class_name != "Runtime.Core.Entity")
						{
							item2 = item2.copy({ "name": class_name });
							e.push(item2);
						}
					}
				}
			}	
		}
		return e.toCollection();
	}
	
	
	
	/**
	 * Returns providers from entities
	 */
	pure Dict<CoreStruct> getProvidersFromEntities(Context c, Collection<CoreStruct> entities)
	{
		Collection<CoreStruct> arr = entities.filter
		(
			bool (CoreStruct item) => item instanceof Provider
		);
		Map<CoreStruct> providers = new Map();
		for (int i=0; i<arr.count(); i++)
		{
			Provider item = arr.item(i);
			providers.set(item.name, item);
		}
		return providers.toDict();
	}
	
	
	
	/**
	 * Register drivers
	 */
	pure Dict<Driver> getDriversFromEntities(Context c, Collection<CoreStruct> entities)
	{
		Collection<CoreStruct> arr = entities.filter
		(
			bool (CoreStruct item) => item instanceof Driver
		);
		Map<CoreStruct> drivers = new Map();
		for (int i=0; i<arr.count(); i++)
		{
			Driver item = arr.item(i);
			
			string driver_name = item.name;
			string class_name = item.value;
			if (class_name == "") class_name = item.name;
			
			CoreDriver driver = rtl::newInstance(class_name, []);
			driver = c.chain(class_name, [driver]);
			if (class_name != driver_name)
			{
				driver = c.chain(driver_name, [driver]);
			}
			
			drivers.set(item.name, driver);
		}
		
		return drivers.toDict();
	}
	
	
	
	/**
	 * Extends entities
	 */
	pure Collection<CoreStruct> extendEntities(Context c, Collection<CoreStruct> entities) => entities;
	
}